// Assorted code peices for the player object
Class Player
private string playerName;
private int hearts;
private bool isOut;
private bool isProtected;
private Card currentCard;

string getPlayerName(){}
void setPlayerName(string newName){}
int getHearts(){}
void giveHearts(int numHearts){}
Card getCard(){}
void setCard(){}
void takeOut(){}
void initialize(){}

// Assorted code pieces for the parent card class
Class Card
private int value;
private string cardName;
private string role;
private string description;
private int gender; // not really used in the game, just used so we don't end up with Princess Gustav .etc

int getValue(){}
string getCardName(){}
string getCardRole(){}
string getCardDescription(){}

virtual void onPickUp(){}
virtual void onPlay(){}
virtual void discard(){}

// ACP for GuardCard, subclass of Card with value 1. The guard allows the user to accuse someone else of being a different card when it is played.
class GuardCard : Card
constructor() {
  value = 1;
  role = "Guard";
  gender = random.next(1,2);
  if (gender = 1){
    name = maleNameGen();
  }
  if (gender = 2){
    name = femaleNameGen();
  }
}
override void onPlay(){
  Player accused = null; //replace with the accused player
  int guessValue = 0; // replace with guessed card
  if (guessvalue == accused.getCard().getCardValue()){
    accused.takeOut();
  }
}

// ACP for PriestCard, subclass of Card with value 2. The priest allows the user to see the value and role of someone else's card when it is played.
class PriestCard : Card
constructor() {
  value = 2;
  role = "Priest";
  gender = random.next(1,2);
  if (gender = 1){
    name = maleNameGen();
  }
  if (gender = 2){
    name = femaleNameGen();
  }
}
override string onPlay(){
  Player confessed = null; // replace with the targeted player.
  return (confessed.getCard().getValue() + confessed.getCard().getRole());
}

//ACP for BaronCard, subclass of Card with value 3. The baron allows the user to start a challenge between you and another player. Whoever has the highest value on their card wins (not the played baron card but the new card it was swapped for).
class BaronCard : Card
constructor() {
  value = 3;
  role = "Baron";
  gender = 1;
  name = maleNameGen();
}
override void onPlay(){
  Player challenged = null: // replace with the challenged player.
  if (currentPlayer.getCard().getValue() > challenged.getCard().getValue()){
    challenged.takeOut();
  }else if (currentPlayer.getCard().getValue() < challenged.getCard().getValue()){
    currentPlayer.takeOut();
  }else{
    //tell players that they have the same card
  }
}

//ACP for HandmaidCard, subclass of card with value 4. The handmaids are a reliable servant to the princess, no-one will challenge or evict you when holding conversation with one (protected until your next turn).
class HandmaidCard : Card
constructor() {
  value = 4;
  role = "Handmaid";
  gender= 2;
